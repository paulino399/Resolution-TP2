CCS PCH C Compiler, Version 5.059, 5967               20-oct.-23 12:00

               Filename:   C:\Users\pj517\Desktop\PRIMEIRO ANO GEII\II ANO\S3\Informatica\ResoluÁ„o\Resolution TP2\TP3\01\exercice1.lst

               ROM used:   272 bytes (1%)
                           Largest free fragment is 32496
               RAM used:   8 (1%) at main() level
                           9 (1%) worst case
               Stack used: 1 locations
               Stack size: 31

*
0000:  GOTO   0098
.................... // Ecriture dans la m√©moire EEPROM 24LC64 
.................... // sorties : PortC : RC4... = SCL et RC3... = SDA 
.................... #include <18f4520.h> 
.................... //////////// Standard Header file for the PIC18F4520 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC18F4520 
....................  
.................... #list 
....................  
.................... #use delay(crystal=20MHz) 
*
0070:  CLRF   FEA
0072:  MOVLW  08
0074:  MOVWF  FE9
0076:  MOVF   FEF,W
0078:  BZ    0094
007A:  MOVLW  06
007C:  MOVWF  01
007E:  CLRF   00
0080:  DECFSZ 00,F
0082:  BRA    0080
0084:  DECFSZ 01,F
0086:  BRA    007E
0088:  MOVLW  7B
008A:  MOVWF  00
008C:  DECFSZ 00,F
008E:  BRA    008C
0090:  DECFSZ FEF,F
0092:  BRA    007A
0094:  GOTO   010C (RETURN)
.................... #use i2c(master, sda=PIN_C3, scl=PIN_C4) // configuration du bus I2C en MAITRE avec utilisation du module I2C interne 
*
0004:  MOVLW  08
0006:  MOVWF  01
0008:  MOVLW  05
000A:  MOVWF  00
000C:  DECFSZ 00,F
000E:  BRA    000C
0010:  BCF    F8B.4
0012:  BCF    F94.4
0014:  MOVLW  06
0016:  MOVWF  00
0018:  DECFSZ 00,F
001A:  BRA    0018
001C:  RLCF   08,F
001E:  BCF    F8B.3
0020:  BTFSC  FD8.0
0022:  BSF    F94.3
0024:  BTFSS  FD8.0
0026:  BCF    F94.3
0028:  BSF    F94.4
002A:  BTFSS  F82.4
002C:  BRA    002A
002E:  DECFSZ 01,F
0030:  BRA    0008
0032:  MOVLW  05
0034:  MOVWF  00
0036:  DECFSZ 00,F
0038:  BRA    0036
003A:  BCF    F8B.4
003C:  BCF    F94.4
003E:  NOP   
0040:  BSF    F94.3
0042:  MOVLW  06
0044:  MOVWF  00
0046:  DECFSZ 00,F
0048:  BRA    0046
004A:  MOVLW  06
004C:  MOVWF  00
004E:  DECFSZ 00,F
0050:  BRA    004E
0052:  BSF    F94.4
0054:  BTFSS  F82.4
0056:  BRA    0054
0058:  CLRF   01
005A:  MOVLW  06
005C:  MOVWF  00
005E:  DECFSZ 00,F
0060:  BRA    005E
0062:  BTFSC  F82.3
0064:  BSF    01.0
0066:  BCF    F8B.4
0068:  BCF    F94.4
006A:  BCF    F8B.3
006C:  BCF    F94.3
006E:  RETURN 0
.................... unsigned int8 DATA0,DATA1; 
.................... unsigned int16 AD_MEM; 
.................... void main() 
*
0098:  CLRF   FF8
009A:  BCF    FD0.7
009C:  MOVF   FC1,W
009E:  ANDLW  C0
00A0:  IORLW  0F
00A2:  MOVWF  FC1
00A4:  MOVLW  07
00A6:  MOVWF  FB4
.................... { 
.................... output_float(PIN_C3); // mise en sortie collecteur ouvert de la broche RC... 
00A8:  BSF    F94.3
.................... output_float(PIN_C4); // mise en sortie collecteur ouvert de la broche RC... 
00AA:  BSF    F94.4
.................... AD_MEM =0x40;// 0x01F0; // adresse m√©moire o√π l'on veut stocker la donn√©e 
00AC:  CLRF   07
00AE:  MOVLW  40
00B0:  MOVWF  06
.................... DATA0 = 90; // donn√©e √† stocker 
00B2:  MOVLW  5A
00B4:  MOVWF  04
.................... // Ecriture en m√©moire √† l'adresse AD_MEM de la donn√©e DATA0 
....................  
....................   //le code pour le cahier de charge 1 on doit le modifier de faÁon ‡ l'adaputeur au codigo rÈel 
.................... while(true) 
.................... { 
.................... i2c_start(); 
00B6:  BSF    F94.3
00B8:  MOVLW  05
00BA:  MOVWF  00
00BC:  DECFSZ 00,F
00BE:  BRA    00BC
00C0:  BSF    F94.4
00C2:  MOVLW  06
00C4:  MOVWF  00
00C6:  DECFSZ 00,F
00C8:  BRA    00C6
00CA:  BCF    F8B.3
00CC:  BCF    F94.3
00CE:  MOVLW  05
00D0:  MOVWF  00
00D2:  DECFSZ 00,F
00D4:  BRA    00D2
00D6:  BCF    F8B.4
00D8:  BCF    F94.4
.................... i2c_write(0b01000000); //i2c_write(0b10100000);  // CONTROL BYTE = adresse 0b1010000 + 0 pour l'√©criture (=0xA0=160) 
00DA:  MOVLW  40
00DC:  MOVWF  08
00DE:  RCALL  0004
.................... i2c_write(DATA0); // √©criture de la donn√©e √† l'adresse d√©finie auparavant 
00E0:  MOVFF  04,08
00E4:  RCALL  0004
.................... i2c_stop(); 
00E6:  BCF    F94.3
00E8:  NOP   
00EA:  BSF    F94.4
00EC:  BTFSS  F82.4
00EE:  BRA    00EC
00F0:  MOVLW  05
00F2:  MOVWF  00
00F4:  DECFSZ 00,F
00F6:  BRA    00F4
00F8:  BRA    00FA
00FA:  NOP   
00FC:  BSF    F94.3
00FE:  MOVLW  05
0100:  MOVWF  00
0102:  DECFSZ 00,F
0104:  BRA    0102
.................... delay_ms(10); 
0106:  MOVLW  0A
0108:  MOVWF  08
010A:  BRA    0070
010C:  BRA    00B6
.................... } 
.................... } 
010E:  SLEEP 

Configuration Fuses:
   Word  1: C200   HS FCMEN IESO
   Word  2: 1E1E   PUT BROWNOUT BORV21 NOWDT WDT32768
   Word  3: 8700   CCP2C1 PBADEN LPT1OSC MCLR
   Word  4: 0081   STVREN NOLVP NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
