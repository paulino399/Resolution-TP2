C L "main" 0 16 1 "FUNCTION"
D G "__PCH__" 0 40 ""5.059""
D G "__DEVICE__" 0 40 "4520"
D G "__DATE__" 0 40 ""21-oct.-23""
D G "__TIME__" 0 40 ""09:07:09""
D G "_UNICODE" 0 40 ""?""
D G "__EVAL" 0 40 ""?"" "On désire toujours allumer les leds 1, 3, 4 et 6 sur la carte 8 LEDS par"
c L "set_tris_a" 1 1 6 "FUNCTION"
f N "set_tris_a" 1 43 ""
v L "value" 1 43 "int8" `54 
f B "set_tris_a" 1 43 "void(int8 value)" `53 
f N "set_tris_b" 1 44 ""
v L "value" 1 44 "int8" `56 
f B "set_tris_b" 1 44 "void(int8 value)" `55 
f N "set_tris_c" 1 45 ""
v L "value" 1 45 "int8" `58 
f B "set_tris_c" 1 45 "void(int8 value)" `57 
f N "set_tris_d" 1 46 ""
v L "value" 1 46 "int8" `60 
f B "set_tris_d" 1 46 "void(int8 value)" `59 
f N "set_tris_e" 1 47 ""
v L "value" 1 47 "int8" `62 
f B "set_tris_e" 1 47 "void(int8 value)" `61 
f N "get_tris_a" 1 48 ""
f B "get_tris_a" 1 48 "int8()" `63 
f N "get_tris_b" 1 49 ""
f B "get_tris_b" 1 49 "int8()" `64 
f N "get_tris_c" 1 50 ""
f B "get_tris_c" 1 50 "int8()" `65 
f N "get_tris_d" 1 51 ""
f B "get_tris_d" 1 51 "int8()" `66 
f N "get_tris_e" 1 52 ""
f B "get_tris_e" 1 52 "int8()" `67 
f N "output_a" 1 53 ""
v L "value" 1 53 "int8" `69 
f B "output_a" 1 53 "void(int8 value)" `68 
f N "output_b" 1 54 ""
v L "value" 1 54 "int8" `71 
f B "output_b" 1 54 "void(int8 value)" `70 
f N "output_c" 1 55 ""
v L "value" 1 55 "int8" `73 
f B "output_c" 1 55 "void(int8 value)" `72 
f N "output_d" 1 56 ""
v L "value" 1 56 "int8" `75 
f B "output_d" 1 56 "void(int8 value)" `74 
f N "output_e" 1 57 ""
v L "value" 1 57 "int8" `77 
f B "output_e" 1 57 "void(int8 value)" `76 
f N "input_a" 1 58 ""
f B "input_a" 1 58 "int8()" `78 
f N "input_b" 1 59 ""
f B "input_b" 1 59 "int8()" `79 
f N "input_c" 1 60 ""
f B "input_c" 1 60 "int8()" `80 
f N "input_d" 1 61 ""
f B "input_d" 1 61 "int8()" `81 
f N "input_e" 1 62 ""
f B "input_e" 1 62 "int8()" `82 
f N "input_change_a" 1 63 ""
f B "input_change_a" 1 63 "int8()" `83 
f N "input_change_b" 1 64 ""
f B "input_change_b" 1 64 "int8()" `84 
f N "input_change_c" 1 65 ""
f B "input_change_c" 1 65 "int8()" `85 
f N "input_change_d" 1 66 ""
f B "input_change_d" 1 66 "int8()" `86 
f N "input_change_e" 1 67 ""
f B "input_change_e" 1 67 "int8()" `87 
f N "port_b_pullups" 1 68 ""
v L "value" 1 68 "int8" `89 
f B "port_b_pullups" 1 68 "void(int8 value)" `88 
f N "input" 1 69 ""
v L "pin" 1 69 "int16" `91 
f B "input" 1 69 "int8(int16 pin)" `90 
f N "input_state" 1 70 ""
v L "pin" 1 70 "int16" `93 
f B "input_state" 1 70 "int8(int16 pin)" `92 
f N "output_low" 1 71 ""
v L "pin" 1 71 "int16" `95 
f B "output_low" 1 71 "void(int16 pin)" `94 
f N "output_high" 1 72 ""
v L "pin" 1 72 "int16" `97 
f B "output_high" 1 72 "void(int16 pin)" `96 
f N "output_toggle" 1 73 ""
v L "pin" 1 73 "int16" `99 
f B "output_toggle" 1 73 "void(int16 pin)" `98 
f N "output_bit" 1 74 ""
v L "pin" 1 74 "int16" `101 
v L "level" 1 74 "int8" `102 
f B "output_bit" 1 74 "void(int16 pin,int8 level)" `100 
f N "output_float" 1 75 ""
v L "pin" 1 75 "int16" `104 
f B "output_float" 1 75 "void(int16 pin)" `103 
f N "output_drive" 1 76 ""
v L "pin" 1 76 "int16" `106 
f B "output_drive" 1 76 "void(int16 pin)" `105  "Constants used to identify pins in the above are:"
d G "PIN_A0" 1 80 "31744"
d G "PIN_A1" 1 81 "31745"
d G "PIN_A2" 1 82 "31746"
d G "PIN_A3" 1 83 "31747"
d G "PIN_A4" 1 84 "31748"
d G "PIN_A5" 1 85 "31749"
d G "PIN_A6" 1 86 "31750"
d G "PIN_A7" 1 87 "31751"
d G "PIN_B0" 1 89 "31752"
d G "PIN_B1" 1 90 "31753"
d G "PIN_B2" 1 91 "31754"
d G "PIN_B3" 1 92 "31755"
d G "PIN_B4" 1 93 "31756"
d G "PIN_B5" 1 94 "31757"
d G "PIN_B6" 1 95 "31758"
d G "PIN_B7" 1 96 "31759"
d G "PIN_C0" 1 98 "31760"
d G "PIN_C1" 1 99 "31761"
d G "PIN_C2" 1 100 "31762"
d G "PIN_C3" 1 101 "31763"
d G "PIN_C4" 1 102 "31764"
d G "PIN_C5" 1 103 "31765"
d G "PIN_C6" 1 104 "31766"
d G "PIN_C7" 1 105 "31767"
d G "PIN_D0" 1 107 "31768"
d G "PIN_D1" 1 108 "31769"
d G "PIN_D2" 1 109 "31770"
d G "PIN_D3" 1 110 "31771"
d G "PIN_D4" 1 111 "31772"
d G "PIN_D5" 1 112 "31773"
d G "PIN_D6" 1 113 "31774"
d G "PIN_D7" 1 114 "31775"
d G "PIN_E0" 1 116 "31776"
d G "PIN_E1" 1 117 "31777"
d G "PIN_E2" 1 118 "31778"
d G "PIN_E3" 1 119 "31779"
d G "FALSE" 1 122 "0"
d G "TRUE" 1 123 "1"
d G "BYTE" 1 125 "int8"
d G "BOOLEAN" 1 126 "int1"
d G "getc" 1 128 "getch"
d G "fgetc" 1 129 "getch"
d G "getchar" 1 130 "getch"
d G "putc" 1 131 "putchar"
d G "fputc" 1 132 "putchar"
d G "fgets" 1 133 "gets"
d G "fputs" 1 134 "puts"
c L "output_drive" 1 1 3 "FUNCTION"
f N "restart_cause" 1 139 ""
f B "restart_cause" 1 139 "int8()" `107 
f N "reset_cpu" 1 140 ""
f B "reset_cpu" 1 140 "void()" `108 
f N "sleep" 1 141 ""
f B "sleep" 1 141 "void()" `109 
f N "sleep" 1 142 ""
v L "type" 1 142 "int8" `111 
f B "sleep" 1 142 "void(int8 type)" `110  "Constants returned from RESTART_CAUSE() are:"
d G "WDT_TIMEOUT" 1 144 "7"
d G "MCLR_FROM_SLEEP" 1 145 "11"
d G "MCLR_FROM_RUN" 1 146 "15"
d G "NORMAL_POWER_UP" 1 147 "12"
d G "BROWNOUT_RESTART" 1 148 "14"
d G "WDT_FROM_SLEEP" 1 149 "3"
d G "RESET_INSTRUCTION" 1 150 "0"
d G "SLEEP_FULL" 1 153 "0" "Default"
d G "SLEEP_IDLE" 1 154 "1" "Clock and peripherals don't stop"
c L "sleep" 1 1 5 "FUNCTION"
f N "setup_timer_0" 1 161 ""
v L "mode" 1 161 "int8" `113 
f B "setup_timer_0" 1 161 "void(int8 mode)" `112 
f N "set_timer0" 1 162 ""
v L "value" 1 162 "int16" `115 
f B "set_timer0" 1 162 "void(int16 value)" `114 
f N "get_timer0" 1 163 ""
f B "get_timer0" 1 163 "int16()" `116 
f N "setup_counters" 1 164 ""
v L "mode" 1 164 "int8" `118 
v L "prescaler" 1 164 "int8" `119 
f B "setup_counters" 1 164 "void(int8 mode,int8 prescaler)" `117 
f N "set_rtcc" 1 165 ""
v L "value" 1 165 "int16" `121 
f B "set_rtcc" 1 165 "void(int16 value)" `120 
f N "get_rtcc" 1 166 ""
f B "get_rtcc" 1 166 "int16()" `122  "Constants used for SETUP_TIMER_0() are:"
d G "T0_INTERNAL" 1 168 "0"
d G "T0_EXT_L_TO_H" 1 169 "32"
d G "T0_EXT_H_TO_L" 1 170 "48"
d G "T0_DIV_1" 1 172 "8"
d G "T0_DIV_2" 1 173 "0"
d G "T0_DIV_4" 1 174 "1"
d G "T0_DIV_8" 1 175 "2"
d G "T0_DIV_16" 1 176 "3"
d G "T0_DIV_32" 1 177 "4"
d G "T0_DIV_64" 1 178 "5"
d G "T0_DIV_128" 1 179 "6"
d G "T0_DIV_256" 1 180 "7"
d G "T0_OFF" 1 182 "0x80"
d G "T0_8_BIT" 1 184 "0x40"
d G "RTCC_INTERNAL" 1 188 "0"
d G "RTCC_EXT_L_TO_H" 1 189 "32"
d G "RTCC_EXT_H_TO_L" 1 190 "48"
d G "RTCC_DIV_1" 1 191 "8"
d G "RTCC_DIV_2" 1 192 "0"
d G "RTCC_DIV_4" 1 193 "1"
d G "RTCC_DIV_8" 1 194 "2"
d G "RTCC_DIV_16" 1 195 "3"
d G "RTCC_DIV_32" 1 196 "4"
d G "RTCC_DIV_64" 1 197 "5"
d G "RTCC_DIV_128" 1 198 "6"
d G "RTCC_DIV_256" 1 199 "7"
d G "RTCC_OFF" 1 200 "0x80"
d G "RTCC_8_BIT" 1 201 "0x40"
c L "get_rtcc" 1 1 8 "FUNCTION"
f N "setup_wdt" 1 212 ""
v L "mode" 1 212 "int16" `124 
f B "setup_wdt" 1 212 "void(int16 mode)" `123 
f N "restart_wdt" 1 213 ""
f B "restart_wdt" 1 213 "void()" `125  "Constants used for SETUP_WDT() are:"
d G "WDT_ON" 1 215 "0x100"
d G "WDT_OFF" 1 216 "0"
d G "WDT_4MS" 1 218 "0x300"
d G "WDT_8MS" 1 219 "0x500"
d G "WDT_16MS" 1 220 "0x700"
d G "WDT_32MS" 1 221 "0x900"
d G "WDT_64MS" 1 222 "0xB00"
d G "WDT_128MS" 1 223 "0xD00"
d G "WDT_256MS" 1 224 "0xF00"
d G "WDT_512MS" 1 225 "0x1100"
d G "WDT_1S" 1 226 "0x1300"
d G "WDT_2S" 1 227 "0x1500"
d G "WDT_4S" 1 228 "0x1700"
d G "WDT_8S" 1 229 "0x1900"
d G "WDT_16" 1 230 "0x1B00"
d G "WDT_32S" 1 231 "0x1D00"
d G "WDT_64S" 1 232 "0x1F00"
d G "WDT_128S" 1 233 "0x2100"
c L "restart_wdt" 1 1 3 "FUNCTION"
f N "setup_timer_1" 1 238 ""
v L "mode" 1 238 "int16" `127 
f B "setup_timer_1" 1 238 "void(int16 mode)" `126 
f N "get_timer1" 1 239 ""
f B "get_timer1" 1 239 "int16()" `128 
f N "set_timer1" 1 240 ""
v L "value" 1 240 "int16" `130 
f B "set_timer1" 1 240 "void(int16 value)" `129  "Constants used for SETUP_TIMER_1() are:"
d G "T1_DISABLED" 1 243 "0"
d G "T1_INTERNAL" 1 244 "0x85"
d G "T1_EXTERNAL" 1 245 "0x87"
d G "T1_EXTERNAL_SYNC" 1 246 "0x83"
d G "T1_CLK_OUT" 1 248 "8"
d G "T1_DIV_BY_1" 1 250 "0"
d G "T1_DIV_BY_2" 1 251 "0x10"
d G "T1_DIV_BY_4" 1 252 "0x20"
d G "T1_DIV_BY_8" 1 253 "0x30"
c L "set_timer1" 1 1 3 "FUNCTION"
f N "setup_timer_2" 1 258 ""
v L "mode" 1 258 "int8" `132 
v L "period" 1 258 "int8" `133 
v L "postscale" 1 258 "int8" `134 
f B "setup_timer_2" 1 258 "void(int8 mode,int8 period,int8 postscale)" `131 
f N "get_timer2" 1 259 ""
f B "get_timer2" 1 259 "int8()" `135 
f N "set_timer2" 1 260 ""
v L "value" 1 260 "int8" `137 
f B "set_timer2" 1 260 "void(int8 value)" `136  "Constants used for SETUP_TIMER_2() are:"
d G "T2_DISABLED" 1 262 "0"
d G "T2_DIV_BY_1" 1 263 "4"
d G "T2_DIV_BY_4" 1 264 "5"
d G "T2_DIV_BY_16" 1 265 "6"
c L "set_timer2" 1 1 3 "FUNCTION"
f N "setup_timer_3" 1 270 ""
v L "mode" 1 270 "int16" `139 
f B "setup_timer_3" 1 270 "void(int16 mode)" `138 
f N "get_timer3" 1 271 ""
f B "get_timer3" 1 271 "int16()" `140 
f N "set_timer3" 1 272 ""
v L "value" 1 272 "int16" `142 
f B "set_timer3" 1 272 "void(int16 value)" `141  "Constants used for SETUP_TIMER_3() are:"
d G "T3_DISABLED" 1 275 "0"
d G "T3_INTERNAL" 1 276 "0x85"
d G "T3_EXTERNAL" 1 277 "0x87"
d G "T3_EXTERNAL_SYNC" 1 278 "0x83"
d G "T3_DIV_BY_1" 1 280 "0"
d G "T3_DIV_BY_2" 1 281 "0x10"
d G "T3_DIV_BY_4" 1 282 "0x20"
d G "T3_DIV_BY_8" 1 283 "0x30"
d G "T3_CCP1_TO_2" 1 286 "0x48"
d G "T3_CCP2" 1 287 "0x8"
c L "set_timer3" 1 1 4 "FUNCTION"
f N "setup_ccp1" 1 293 ""
v L "mode" 1 293 "int32" `144 
f B "setup_ccp1" 1 293 "void(int32 mode)" `143 
f N "setup_ccp1" 1 294 ""
v L "mode" 1 294 "int32" `146 
v L "pwm" 1 294 "int8" `147 
f B "setup_ccp1" 1 294 "void(int32 mode,int8 pwm)" `145 
f N "set_pwm1_duty" 1 295 ""
v L "value" 1 295 "int16" `149 
f B "set_pwm1_duty" 1 295 "void(int16 value)" `148  "Constants used for SETUP_CCPx() are:"
d G "CCP_OFF" 1 297 "0"
d G "CCP_CAPTURE_FE" 1 298 "0x04"
d G "CCP_CAPTURE_RE" 1 299 "0x05"
d G "CCP_CAPTURE_DIV_4" 1 300 "0x06"
d G "CCP_CAPTURE_DIV_16" 1 301 "0x07"
d G "CCP_COMPARE_SET_ON_MATCH" 1 302 "0x08"
d G "CCP_COMPARE_CLR_ON_MATCH" 1 303 "0x09"
d G "CCP_COMPARE_INT" 1 304 "0x0A"
d G "CCP_COMPARE_INT_AND_TOGGLE" 1 305 "0x02"
d G "CCP_COMPARE_RESET_TIMER" 1 306 "0x0B"
d G "CCP_PWM" 1 307 "0x0C"
d G "CCP_PWM_PLUS_1" 1 308 "0x1c"
d G "CCP_PWM_PLUS_2" 1 309 "0x2c"
d G "CCP_PWM_PLUS_3" 1 310 "0x3c"
c L "set_pwm1_duty" 1 1 1 "FUNCTION"
d G "CCP_PWM_H_H" 1 317 "0x0c"
d G "CCP_PWM_H_L" 1 318 "0x0d"
d G "CCP_PWM_L_H" 1 319 "0x0e"
d G "CCP_PWM_L_L" 1 320 "0x0f"
d G "CCP_PWM_FULL_BRIDGE" 1 322 "0x40"
d G "CCP_PWM_FULL_BRIDGE_REV" 1 323 "0xC0"
d G "CCP_PWM_HALF_BRIDGE" 1 324 "0x80"
d G "CCP_SHUTDOWN_ON_COMP1" 1 326 "0x100000"
d G "CCP_SHUTDOWN_ON_COMP2" 1 327 "0x200000"
d G "CCP_SHUTDOWN_ON_COMP" 1 328 "0x300000"
d G "CCP_SHUTDOWN_ON_INT0" 1 329 "0x400000"
d G "CCP_SHUTDOWN_ON_COMP1_INT0" 1 330 "0x500000"
d G "CCP_SHUTDOWN_ON_COMP2_INT0" 1 331 "0x600000"
d G "CCP_SHUTDOWN_ON_COMP_INT0" 1 332 "0x700000"
d G "CCP_SHUTDOWN_AC_L" 1 334 "0x000000"
d G "CCP_SHUTDOWN_AC_H" 1 335 "0x040000"
d G "CCP_SHUTDOWN_AC_F" 1 336 "0x080000"
d G "CCP_SHUTDOWN_BD_L" 1 338 "0x000000"
d G "CCP_SHUTDOWN_BD_H" 1 339 "0x010000"
d G "CCP_SHUTDOWN_BD_F" 1 340 "0x020000"
d G "CCP_SHUTDOWN_RESTART" 1 342 "0x80000000"
c L "set_pwm1_duty" 1 1 1 "FUNCTION"
f N "setup_ccp2" 1 346 ""
v L "mode" 1 346 "int32" `154 
f B "setup_ccp2" 1 346 "void(int32 mode)" `153 
f N "setup_ccp2" 1 347 ""
v L "mode" 1 347 "int32" `156 
v L "pwm" 1 347 "int8" `157 
f B "setup_ccp2" 1 347 "void(int32 mode,int8 pwm)" `155 
f N "set_pwm2_duty" 1 348 ""
v L "value" 1 348 "int16" `159 
f B "set_pwm2_duty" 1 348 "void(int16 value)" `158 
c L "set_pwm2_duty" 1 1 5 "FUNCTION"
f N "setup_psp" 1 357 ""
v L "mode" 1 357 "int8" `164 
f B "setup_psp" 1 357 "void(int8 mode)" `163 
f N "psp_output_full" 1 358 ""
f B "psp_output_full" 1 358 "int8()" `165 
f N "psp_input_full" 1 359 ""
f B "psp_input_full" 1 359 "int8()" `166 
f N "psp_overflow" 1 360 ""
f B "psp_overflow" 1 360 "int8()" `167  "Constants used in SETUP_PSP() are:"
d G "PSP_ENABLED" 1 362 "0x10"
d G "PSP_DISABLED" 1 363 "0"
c L "psp_overflow" 1 1 3 "FUNCTION"
f N "setup_spi" 1 370 ""
v L "mode" 1 370 "int32" `170 
f B "setup_spi" 1 370 "void(int32 mode)" `169 
f N "spi_write" 1 371 ""
v L "value" 1 371 "int8" `172 
f B "spi_write" 1 371 "void(int8 value)" `171 
f N "spi_read" 1 372 ""
f B "spi_read" 1 372 "int8()" `173 
f N "spi_read" 1 373 ""
v L "value" 1 373 "int8" `175 
f B "spi_read" 1 373 "int8(int8 value)" `174 
f N "spi_data_is_in" 1 374 ""
f B "spi_data_is_in" 1 374 "int8()" `176 
f N "setup_spi2" 1 375 ""
v L "mode" 1 375 "int32" `178 
f B "setup_spi2" 1 375 "void(int32 mode)" `177 
f N "spi_write2" 1 376 ""
v L "value" 1 376 "int8" `180 
f B "spi_write2" 1 376 "void(int8 value)" `179 
f N "spi_read2" 1 377 ""
f B "spi_read2" 1 377 "int8()" `181 
f N "spi_read2" 1 378 ""
v L "value" 1 378 "int8" `183 
f B "spi_read2" 1 378 "int8(int8 value)" `182 
f N "spi_data_is_in2" 1 379 ""
f B "spi_data_is_in2" 1 379 "int8()" `184  "Constants used in SETUP_SPI() are:"
d G "SPI_DISABLED" 1 381 "0x00"
d G "SPI_MASTER" 1 382 "0x20"
d G "SPI_SLAVE" 1 383 "0x24"
d G "SPI_SCK_IDLE_HIGH" 1 384 "0x10"
d G "SPI_SCK_IDLE_LOW" 1 385 "0x00"
d G "SPI_CLK_DIV_4" 1 386 "0x00"
d G "SPI_CLK_DIV_16" 1 387 "0x01"
d G "SPI_CLK_DIV_64" 1 388 "0x02"
d G "SPI_CLK_T2" 1 389 "0x03"
d G "SPI_SS_DISABLED" 1 390 "0x01"
d G "SPI_XMIT_L_TO_H" 1 392 "0x4000"
d G "SPI_XMIT_H_TO_L" 1 393 "0x0000"
d G "SPI_SAMPLE_AT_MIDDLE" 1 395 "0x0000"
d G "SPI_SAMPLE_AT_END" 1 396 "0x8000"
d G "SPI_L_TO_H" 1 399 "SPI_SCK_IDLE_LOW"
d G "SPI_H_TO_L" 1 400 "SPI_SCK_IDLE_HIGH"
c L "spi_data_is_in2" 1 1 2 "FUNCTION"
f N "setup_uart" 1 404 ""
v L "baud" 1 404 "int32" `186 
f B "setup_uart" 1 404 "void(int32 baud)" `185 
f N "setup_uart" 1 405 ""
v L "baud" 1 405 "int32" `188 
v L "stream" 1 405 "int8" `189 
f B "setup_uart" 1 405 "void(int32 baud,int8 stream)" `187 
f N "setup_uart" 1 406 ""
v L "baud" 1 406 "int32" `191 
v L "stream" 1 406 "int8" `192 
v L "clock" 1 406 "int32" `193 
f B "setup_uart" 1 406 "void(int32 baud,int8 stream,int32 clock)" `190 
f N "set_uart_speed" 1 407 ""
v L "baud" 1 407 "int32" `195 
f B "set_uart_speed" 1 407 "void(int32 baud)" `194 
f N "set_uart_speed" 1 408 ""
v L "baud" 1 408 "int32" `197 
v L "stream" 1 408 "int8" `198 
f B "set_uart_speed" 1 408 "void(int32 baud,int8 stream)" `196 
f N "set_uart_speed" 1 409 ""
v L "baud" 1 409 "int32" `200 
v L "stream" 1 409 "int8" `201 
v L "clock" 1 409 "int32" `202 
f B "set_uart_speed" 1 409 "void(int32 baud,int8 stream,int32 clock)" `199  "Constants used in setup_uart() are:"
d G "UART_ADDRESS" 1 413 "2"
d G "UART_DATA" 1 414 "4"
d G "UART_AUTODETECT" 1 415 "8"
d G "UART_AUTODETECT_NOWAIT" 1 416 "9"
d G "UART_WAKEUP_ON_RDA" 1 417 "10"
d G "UART_SEND_BREAK" 1 418 "13"
c L "set_uart_speed" 1 1 3 "FUNCTION"
f N "setup_comparator" 1 422 ""
v L "mode" 1 422 "int32" `204 
f B "setup_comparator" 1 422 "void(int32 mode)" `203  "Constants used in setup_comparator() are:"
d G "A0_A3_A1_A3" 1 424 "0xfff04"
d G "A0_A3_A1_A2_OUT_ON_A4_A5" 1 425 "0xfcf03"
d G "A0_A3_A1_A3_OUT_ON_A4_A5" 1 426 "0xbcf05"
d G "NC_NC_NC_NC" 1 427 "0x0ff07"
d G "A0_A3_A1_A2" 1 428 "0xfff02"
d G "A0_A3_NC_NC_OUT_ON_A4" 1 429 "0x9ef01"
d G "A0_VR_A1_VR" 1 430 "0x3ff06"
d G "A3_VR_A2_VR" 1 431 "0xcff0e"
d G "CP1_INVERT" 1 432 "0x0000010"
d G "CP2_INVERT" 1 433 "0x0000020"
c L "setup_comparator" 1 1 2 "FUNCTION"
f N "setup_vref" 1 440 ""
v L "mode" 1 440 "int8" `208 
f B "setup_vref" 1 440 "void(int8 mode)" `207  "Constants used in setup_vref() are:"
d G "VREF_LOW" 1 442 "0xa0"
d G "VREF_HIGH" 1 443 "0x80"
d G "VREF_F5" 1 445 "0x40"
d G "VREF_COMP" 1 446 "0x10"
c L "setup_vref" 1 1 2 "FUNCTION"
f N "setup_low_volt_detect" 1 450 ""
v L "mode" 1 450 "int8" `210 
f B "setup_low_volt_detect" 1 450 "void(int8 mode)" `209  "Constants used in setup_low_volt_detect() are:"
d G "LVD_LVDIN" 1 452 "0x1F"
d G "LVD_45" 1 453 "0x1E"
d G "LVD_42" 1 454 "0x1D"
d G "LVD_40" 1 455 "0x1C"
d G "LVD_38" 1 456 "0x1B"
d G "LVD_36" 1 457 "0x1A"
d G "LVD_35" 1 458 "0x19"
d G "LVD_33" 1 459 "0x18"
d G "LVD_30" 1 460 "0x17"
d G "LVD_28" 1 461 "0x16"
d G "LVD_27" 1 462 "0x15"
d G "LVD_25" 1 463 "0x14"
d G "LVD_24" 1 464 "0x13"
d G "LVD_23" 1 465 "0x12"
d G "LVD_22" 1 466 "0x11"
d G "LVD_21" 1 467 "0x10"
d G "LVD_TRIGGER_BELOW" 1 469 "0"
d G "LVD_TRIGGER_ABOVE" 1 470 "0x80"
c L "setup_low_volt_detect" 1 1 2 "FUNCTION"
f N "setup_oscillator" 1 475 ""
v L "mode" 1 475 "int8" `212 
f B "setup_oscillator" 1 475 "int8(int8 mode)" `211 
f N "setup_oscillator" 1 476 ""
v L "mode" 1 476 "int8" `214 
v L "tune" 1 476 "sint8" `215 
f B "setup_oscillator" 1 476 "int8(int8 mode,sint8 tune)" `213  "Constants used in setup_oscillator() are:"
d G "OSC_31KHZ" 1 479 "0"
d G "OSC_125KHZ" 1 480 "0x10"
d G "OSC_250KHZ" 1 481 "0x20"
d G "OSC_500KHZ" 1 482 "0x30"
d G "OSC_1MHZ" 1 483 "0x40"
d G "OSC_2MHZ" 1 484 "0x50"
d G "OSC_4MHZ" 1 485 "0x60"
d G "OSC_8MHZ" 1 486 "0x70"
d G "OSC_16MHZ" 1 487 "0x4060"
d G "OSC_32MHZ" 1 488 "0x4070"
d G "OSC_TIMER1" 1 490 "1"
d G "OSC_INTRC" 1 491 "2"
d G "OSC_NORMAL" 1 492 "0"
d G "OSC_IDLE_MODE" 1 494 "0x80"
d G "OSC_31250" 1 495 "0x8000"
d G "OSC_PLL_ON" 1 496 "0x4000"
d G "OSC_PLL_OFF" 1 497 "0"
d G "OSC_STATE_STABLE" 1 501 "4"
d G "OSC_STATE_EXT_RUNNING" 1 502 "8"
c L "setup_oscillator" 1 1 4 "FUNCTION"
f N "setup_adc" 1 509 ""
v L "mode" 1 509 "int16" `217 
f B "setup_adc" 1 509 "void(int16 mode)" `216 
f N "read_adc" 1 510 ""
f B "read_adc" 1 510 "int8()" `218 
f N "read_adc" 1 511 ""
v L "mode" 1 511 "int8" `220 
f B "read_adc" 1 511 "int8(int8 mode)" `219 
f N "read_adc" 1 512 ""
f G "read_adc" 1 512 "int16()" `221 
f N "read_adc" 1 513 ""
v L "mode" 1 513 "int8" `222 
f G "read_adc" 1 513 "int16(int8 mode,int8 pins)" `221 
f N "adc_done" 1 514 ""
f B "adc_done" 1 514 "int8(int8 mode,int8 pins)" `221  "Constants used for SETUP_ADC() are:"
d G "ADC_OFF" 1 516 "0" "ADC Off"
d G "ADC_CLOCK_DIV_2" 1 517 "0x100"
d G "ADC_CLOCK_DIV_4" 1 518 "0x04"
d G "ADC_CLOCK_DIV_8" 1 519 "0x01"
d G "ADC_CLOCK_DIV_16" 1 520 "0x05"
d G "ADC_CLOCK_DIV_32" 1 521 "0x02"
d G "ADC_CLOCK_DIV_64" 1 522 "0x06"
d G "ADC_CLOCK_INTERNAL" 1 523 "0x07" "Internal 2-6us"
d G "ADC_TAD_MUL_0" 1 525 "0x00"
d G "ADC_TAD_MUL_2" 1 526 "0x08"
d G "ADC_TAD_MUL_4" 1 527 "0x10"
d G "ADC_TAD_MUL_6" 1 528 "0x18"
d G "ADC_TAD_MUL_8" 1 529 "0x20"
d G "ADC_TAD_MUL_12" 1 530 "0x28"
d G "ADC_TAD_MUL_16" 1 531 "0x30"
d G "ADC_TAD_MUL_20" 1 532 "0x38"
c L "adc_done" 1 1 1 "FUNCTION"
f N "setup_adc_ports" 1 535 ""
v L "pins" 1 535 "int8" `223 
f B "setup_adc_ports" 1 535 "void(int8 pins)" `222 
f N "setup_adc_ports" 1 536 ""
v L "pins" 1 536 "int8" `225 
v L "reference" 1 536 "int8" `226 
f B "setup_adc_ports" 1 536 "void(int8 pins,int8 reference)" `224 
f N "set_analog_pins" 1 537 ""
v L "pins" 1 537 "int8" `228 
f B "set_analog_pins" 1 537 "void(int8 pins)" `227 
f N "set_analog_pins" 1 538 ""
v L "pins" 1 538 "int8" `230 
v L "reference" 1 538 "int8" `231 
f B "set_analog_pins" 1 538 "void(int8 pins,int8 reference)" `229 
f N "set_adc_channel" 1 539 ""
v L "channel" 1 539 "int8" `233 
f B "set_adc_channel" 1 539 "void(int8 channel)" `232  "Constants used in SETUP_ADC_PORTS() and SET_ANALOG_PINS() are:"
d G "NO_ANALOGS" 1 542 "0x0F" "None"
d G "ALL_ANALOG" 1 543 "0x00" "A0 A1 A2 A3 A5 E0 E1 E2 B2 B3 B1 B4 B0"
d G "AN0_TO_AN11" 1 544 "0x03" "A0 A1 A2 A3 A5 E0 E1 E2 B2 B3 B1 B4"
d G "AN0_TO_AN10" 1 545 "0x04" "A0 A1 A2 A3 A5 E0 E1 E2 B2 B3 B1"
d G "AN0_TO_AN9" 1 546 "0x05" "A0 A1 A2 A3 A5 E0 E1 E2 B2 B3"
d G "AN0_TO_AN8" 1 547 "0x06" "A0 A1 A2 A3 A5 E0 E1 E2 B2"
d G "AN0_TO_AN7" 1 548 "0x07" "A0 A1 A2 A3 A5 E0 E1 E2"
d G "AN0_TO_AN6" 1 549 "0x08" "A0 A1 A2 A3 A5 E0 E1"
d G "AN0_TO_AN5" 1 550 "0x09" "A0 A1 A2 A3 A5 E0"
d G "AN0_TO_AN4" 1 551 "0x0A" "A0 A1 A2 A3 A5"
d G "AN0_TO_AN3" 1 552 "0x0B" "A0 A1 A2 A3"
d G "AN0_TO_AN2" 1 553 "0x0C" "A0 A1 A2"
d G "AN0_TO_AN1" 1 554 "0x0D" "A0 A1"
d G "AN0" 1 555 "0x0E" "A0"
d G "AN0_TO_AN11_ANALOG" 1 556 "0x03" "!old only provided for compatibility"
d G "AN0_TO_AN10_ANALOG" 1 557 "0x04" "!old only provided for compatibility"
d G "AN0_TO_AN9_ANALOG" 1 558 "0x05" "!old only provided for compatibility"
d G "AN0_TO_AN8_ANALOG" 1 559 "0x06" "!old only provided for compatibility"
d G "AN0_TO_AN7_ANALOG" 1 560 "0x07" "!old only provided for compatibility"
d G "AN0_TO_AN6_ANALOG" 1 561 "0x08" "!old only provided for compatibility"
d G "AN0_TO_AN5_ANALOG" 1 562 "0x09" "!old only provided for compatibility"
d G "AN0_TO_AN4_ANALOG" 1 563 "0x0A" "!old only provided for compatibility"
d G "AN0_TO_AN3_ANALOG" 1 564 "0x0B" "!old only provided for compatibility"
d G "AN0_TO_AN2_ANALOG" 1 565 "0x0C" "!old only provided for compatibility"
d G "AN0_TO_AN1_ANALOG" 1 566 "0x0D" "!old only provided for compatibility"
d G "AN0_ANALOG" 1 567 "0x0E" "!old only provided for compatibility"
d G "VSS_VDD" 1 570 "0x00" "Range 0-Vdd"
d G "VREF_VREF" 1 571 "0x30" "Range VrefL-VrefH"
d G "VREF_VDD" 1 572 "0x20" "Range VrefL-Vdd"
d G "VSS_VREF" 1 573 "0x10" "Range 0-VrefH"
d G "ADC_START_AND_READ" 1 576 "7" "This is the default if nothing is specified"
d G "ADC_START_ONLY" 1 577 "1"
d G "ADC_READ_ONLY" 1 578 "6"
c L "set_adc_channel" 1 1 3 "FUNCTION"
f N "abs" 1 584 ""
v L "x" 1 584 "sint8" `235 
f B "abs" 1 584 "sint8(sint8 x)" `234 
f N "abs" 1 585 ""
v L "x" 1 585 "sint16" `237 
f B "abs" 1 585 "sint16(sint16 x)" `236 
f N "abs" 1 586 ""
v L "x" 1 586 "sint32" `239 
f B "abs" 1 586 "sint32(sint32 x)" `238 
f N "abs" 1 587 ""
v L "x" 1 587 "float" `241 
f B "abs" 1 587 "float(float x)" `240 
f N "_mul" 1 588 ""
v L "??65535" 1 588 "int8" `243 
v L "??65535" 1 588 "int8" `244 
f B "_mul" 1 588 "int16(int8 ,int8 )" `242 
f N "_mul" 1 589 ""
v L "??65535" 1 589 "sint8" `246 
v L "??65535" 1 589 "sint8" `247 
f B "_mul" 1 589 "sint16(sint8 ,sint8 )" `245 
f N "_mul" 1 590 ""
v L "??65535" 1 590 "int16" `249 
v L "??65535" 1 590 "int16" `250 
f B "_mul" 1 590 "int32(int16 ,int16 )" `248 
f N "_mul" 1 591 ""
v L "??65535" 1 591 "sint16" `252 
v L "??65535" 1 591 "sint16" `253 
f B "_mul" 1 591 "sint32(sint16 ,sint16 )" `251  "Memory Manipulation Prototypes:"
f N "read_bank" 1 594 ""
v L "bank" 1 594 "int8" `255 
v L "offset" 1 594 "int8" `256 
f B "read_bank" 1 594 "int8(int8 bank,int8 offset)" `254 
f N "write_bank" 1 595 ""
v L "bank" 1 595 "int8" `258 
v L "offset" 1 595 "int8" `259 
v L "value" 1 595 "int8" `260 
f B "write_bank" 1 595 "void(int8 bank,int8 offset,int8 value)" `257 
f N "strcpy" 1 596 ""
v L "dest" 1 596 "*int8" `262 
v L "src" 1 596 "*int8" `263 
f B "strcpy" 1 596 "void(*int8 dest,*int8 src)" `261 
f N "memset" 1 597 ""
v L "destination" 1 597 "*int8" `265 
v L "value" 1 597 "int8" `266 
v L "num" 1 597 "int16" `267 
f B "memset" 1 597 "void(*int8 destination,int8 value,int16 num)" `264 
f N "memcpy" 1 598 ""
v L "destination" 1 598 "*int8" `269 
v L "source" 1 598 "*int8" `270 
v L "num" 1 598 "int16" `271 
f B "memcpy" 1 598 "void(*int8 destination,*int8 source,int16 num)" `268  "String Prototypes:"
f N "toupper" 1 601 ""
v L "cvalue" 1 601 "int8" `273 
f B "toupper" 1 601 "int8(int8 cvalue)" `272 
f N "tolower" 1 602 ""
v L "cvalue" 1 602 "int8" `275 
f B "tolower" 1 602 "int8(int8 cvalue)" `274 
f N "sprintf" 1 603 ""
v L "string" 1 603 "*int8" `277 
v L "cstring" 1 603 "*int8" `278 
f B "sprintf" 1 603 "void(*int8 string,*int8 cstring,*int8 _VA_LIST)" `276  "Data Manipulators Prototypes:"
f N "shift_left" 1 606 ""
v L "address" 1 606 "*int8" `281 
v L "bytes" 1 606 "int8" `282 
v L "value" 1 606 "int8" `283 
f B "shift_left" 1 606 "int8(*int8 address,int8 bytes,int8 value)" `280 
f N "shift_right" 1 607 ""
v L "address" 1 607 "*int8" `285 
v L "bytes" 1 607 "int8" `286 
v L "value" 1 607 "int8" `287 
f B "shift_right" 1 607 "int8(*int8 address,int8 bytes,int8 value)" `284 
f N "rotate_left" 1 608 ""
v L "address" 1 608 "*int8" `289 
v L "bytes" 1 608 "int8" `290 
f B "rotate_left" 1 608 "void(*int8 address,int8 bytes)" `288 
f N "rotate_right" 1 609 ""
v L "address" 1 609 "*int8" `292 
v L "bytes" 1 609 "int8" `293 
f B "rotate_right" 1 609 "void(*int8 address,int8 bytes)" `291 
f N "swap" 1 610 ""
v L "value" 1 610 "int8" `295 
f B "swap" 1 610 "void(int8 value)" `294 
f N "make8" 1 611 ""
v L "var" 1 611 "int16" `297 
v L "offset" 1 611 "int8" `298 
f B "make8" 1 611 "int8(int16 var,int8 offset)" `296 
f N "make8" 1 612 ""
v L "var" 1 612 "int32" `300 
v L "offset" 1 612 "int8" `301 
f B "make8" 1 612 "int8(int32 var,int8 offset)" `299 
f N "make16" 1 613 ""
v L "varhigh" 1 613 "int8" `303 
v L "varlow" 1 613 "int8" `304 
f B "make16" 1 613 "int16(int8 varhigh,int8 varlow)" `302 
f N "make32" 1 614 ""
v L "var1" 1 614 "int16" `306 
f B "make32" 1 614 "int32(int16 var1)" `305 
f N "make32" 1 615 ""
v L "var1" 1 615 "int16" `308 
v L "var2" 1 615 "int16" `309 
f B "make32" 1 615 "int32(int16 var1,int16 var2)" `307 
f N "make32" 1 616 ""
v L "var1" 1 616 "int16" `311 
v L "var2" 1 616 "int8" `312 
f B "make32" 1 616 "int32(int16 var1,int8 var2)" `310 
f N "make32" 1 617 ""
v L "var1" 1 617 "int16" `314 
v L "var2" 1 617 "int8" `315 
v L "var3" 1 617 "int8" `316 
f B "make32" 1 617 "int32(int16 var1,int8 var2,int8 var3)" `313 
f N "make32" 1 618 ""
v L "var1" 1 618 "int8" `318 
f B "make32" 1 618 "int32(int8 var1)" `317 
f N "make32" 1 619 ""
v L "var1" 1 619 "int8" `320 
v L "var2" 1 619 "int8" `321 
f B "make32" 1 619 "int32(int8 var1,int8 var2)" `319 
f N "make32" 1 620 ""
v L "var1" 1 620 "int8" `323 
v L "var2" 1 620 "int8" `324 
v L "var3" 1 620 "int8" `325 
f B "make32" 1 620 "int32(int8 var1,int8 var2,int8 var3)" `322 
f N "make32" 1 621 ""
v L "var1" 1 621 "int8" `327 
v L "var2" 1 621 "int8" `328 
v L "var3" 1 621 "int8" `329 
v L "var4" 1 621 "int8" `330 
f B "make32" 1 621 "int32(int8 var1,int8 var2,int8 var3,int8 var4)" `326 
f N "make32" 1 622 ""
v L "var1" 1 622 "int8" `332 
v L "var2" 1 622 "int16" `333 
f B "make32" 1 622 "int32(int8 var1,int16 var2)" `331 
f N "make32" 1 623 ""
v L "var1" 1 623 "int8" `335 
v L "var2" 1 623 "int16" `336 
v L "var3" 1 623 "int8" `337 
f B "make32" 1 623 "int32(int8 var1,int16 var2,int8 var3)" `334 
f N "make32" 1 624 ""
v L "var1" 1 624 "int8" `339 
v L "var2" 1 624 "int8" `340 
v L "var3" 1 624 "int16" `341 
f B "make32" 1 624 "int32(int8 var1,int8 var2,int16 var3)" `338 
f N "bit_set" 1 625 ""
v L "var" 1 625 "int8" `343 
v L "bit" 1 625 "int8" `344 
f B "bit_set" 1 625 "void(int8 var,int8 bit)" `342 
f N "bit_set" 1 626 ""
v L "var" 1 626 "int16" `346 
v L "bit" 1 626 "int8" `347 
f B "bit_set" 1 626 "void(int16 var,int8 bit)" `345 
f N "bit_set" 1 627 ""
v L "var" 1 627 "int32" `349 
v L "bit" 1 627 "int8" `350 
f B "bit_set" 1 627 "void(int32 var,int8 bit)" `348 
f N "bit_clear" 1 628 ""
v L "var" 1 628 "int8" `352 
v L "bit" 1 628 "int8" `353 
f B "bit_clear" 1 628 "void(int8 var,int8 bit)" `351 
f N "bit_clear" 1 629 ""
v L "var" 1 629 "int16" `355 
v L "bit" 1 629 "int8" `356 
f B "bit_clear" 1 629 "void(int16 var,int8 bit)" `354 
f N "bit_clear" 1 630 ""
v L "var" 1 630 "int32" `358 
v L "bit" 1 630 "int8" `359 
f B "bit_clear" 1 630 "void(int32 var,int8 bit)" `357 
f N "bit_test" 1 631 ""
v L "var" 1 631 "int8" `361 
v L "bit" 1 631 "int8" `362 
f B "bit_test" 1 631 "int8(int8 var,int8 bit)" `360 
f N "bit_test" 1 632 ""
v L "var" 1 632 "int16" `364 
v L "bit" 1 632 "int8" `365 
f B "bit_test" 1 632 "int8(int16 var,int8 bit)" `363 
f N "bit_test" 1 633 ""
v L "var" 1 633 "int32" `367 
v L "bit" 1 633 "int8" `368 
f B "bit_test" 1 633 "int8(int32 var,int8 bit)" `366  "#use delay() Prototypes:"
f N "delay_cycles" 1 636 ""
v L "count" 1 636 "int8" `370 
f B "delay_cycles" 1 636 "void(int8 count)" `369 
f N "delay_ms" 1 637 ""
v L "time" 1 637 "int16" `372 
f B "delay_ms" 1 637 "void(int16 time)" `371 
f N "delay_us" 1 638 ""
v L "time" 1 638 "int16" `374 
f B "delay_us" 1 638 "void(int16 time)" `373  "#use rs232() Prototypes:"
f N "putchar" 1 641 ""
v L "cdata" 1 641 "int8" `376 
f B "putchar" 1 641 "void(int8 cdata)" `375 
f N "putchar" 1 642 ""
v L "cdata" 1 642 "int8" `378 
v L "stream" 1 642 "int8" `379 
f B "putchar" 1 642 "void(int8 cdata,int8 stream)" `377 
f N "puts" 1 643 ""
v L "string" 1 643 "*int8" `381 
f B "puts" 1 643 "void(*int8 string)" `380 
f N "puts" 1 644 ""
v L "string" 1 644 "*int8" `383 
v L "stream" 1 644 "int8" `384 
f B "puts" 1 644 "void(*int8 string,int8 stream)" `382 
f N "getch" 1 645 ""
f B "getch" 1 645 "int8()" `385 
f N "getch" 1 646 ""
v L "stream" 1 646 "int8" `387 
f B "getch" 1 646 "int8(int8 stream)" `386 
f N "gets" 1 647 ""
v L "string" 1 647 "*int8" `389 
f B "gets" 1 647 "void(*int8 string)" `388 
f N "gets" 1 648 ""
v L "string" 1 648 "*int8" `391 
v L "stream" 1 648 "int8" `392 
f B "gets" 1 648 "void(*int8 string,int8 stream)" `390 
f N "kbhit" 1 649 ""
f B "kbhit" 1 649 "int8()" `393 
f N "kbhit" 1 650 ""
v L "stream" 1 650 "int8" `395 
f B "kbhit" 1 650 "int8(int8 stream)" `394 
f N "printf" 1 651 ""
v L "string" 1 651 "*int8" `397 
f B "printf" 1 651 "void(*int8 string,*int8 _VA_LIST)" `396 
f N "fprintf" 1 652 ""
v L "stream" 1 652 "int8" `400 
v L "string" 1 652 "*int8" `401 
f B "fprintf" 1 652 "void(int8 stream,*int8 string,*int8 _VA_LIST)" `399 
f N "putc_send" 1 653 ""
f B "putc_send" 1 653 "void()" `403 
f N "fputc_send" 1 654 ""
v L "stream" 1 654 "int8" `405 
f B "fputc_send" 1 654 "void(int8 stream)" `404 
f N "rcv_buffer_full" 1 655 ""
f B "rcv_buffer_full" 1 655 "int8()" `406 
f N "rcv_buffer_full" 1 656 ""
v L "stream" 1 656 "int8" `408 
f B "rcv_buffer_full" 1 656 "int8(int8 stream)" `407 
f N "rcv_buffer_bytes" 1 657 ""
f B "rcv_buffer_bytes" 1 657 "int16()" `409 
f N "rcv_buffer_bytes" 1 658 ""
v L "stream" 1 658 "int8" `411 
f B "rcv_buffer_bytes" 1 658 "int16(int8 stream)" `410 
f N "tx_buffer_full" 1 659 ""
f B "tx_buffer_full" 1 659 "int8()" `412 
f N "tx_buffer_full" 1 660 ""
v L "stream" 1 660 "int8" `414 
f B "tx_buffer_full" 1 660 "int8(int8 stream)" `413 
f N "tx_buffer_bytes" 1 661 ""
f B "tx_buffer_bytes" 1 661 "int16()" `415 
f N "tx_buffer_bytes" 1 662 ""
v L "stream" 1 662 "int8" `417 
f B "tx_buffer_bytes" 1 662 "int16(int8 stream)" `416  "#use i2c() Prototypes:"
f N "i2c_read" 1 665 ""
f B "i2c_read" 1 665 "int8()" `418 
f N "i2c_read" 1 666 ""
v L "ack" 1 666 "int8" `420 
f B "i2c_read" 1 666 "int8(int8 ack)" `419 
f N "i2c_read" 1 667 ""
v L "stream" 1 667 "int8" `422 
v L "ack" 1 667 "int8" `423 
f B "i2c_read" 1 667 "int8(int8 stream,int8 ack)" `421 
f N "i2c_write" 1 668 ""
v L "data" 1 668 "int8" `425 
f B "i2c_write" 1 668 "int8(int8 data)" `424 
f N "i2c_write" 1 669 ""
v L "stream" 1 669 "int8" `427 
v L "data" 1 669 "int8" `428 
f B "i2c_write" 1 669 "int8(int8 stream,int8 data)" `426 
f N "i2c_start" 1 670 ""
f B "i2c_start" 1 670 "void()" `429 
f N "i2c_start" 1 671 ""
v L "stream" 1 671 "int8" `431 
f B "i2c_start" 1 671 "void(int8 stream)" `430 
f N "i2c_start" 1 672 ""
v L "stream" 1 672 "int8" `433 
v L "restart" 1 672 "int8" `434 
f B "i2c_start" 1 672 "void(int8 stream,int8 restart)" `432 
f N "i2c_stop" 1 673 ""
f B "i2c_stop" 1 673 "void()" `435 
f N "i2c_stop" 1 674 ""
v L "stream" 1 674 "int8" `437 
f B "i2c_stop" 1 674 "void(int8 stream)" `436 
f N "i2c_isr_state" 1 675 ""
f B "i2c_isr_state" 1 675 "int8()" `438 
f N "i2c_slaveaddr" 1 676 ""
v L "addr" 1 676 "int8" `440 
f B "i2c_slaveaddr" 1 676 "void(int8 addr)" `439 
f N "i2c_slaveaddr" 1 677 ""
v L "stream" 1 677 "int8" `442 
v L "addr" 1 677 "int8" `443 
f B "i2c_slaveaddr" 1 677 "void(int8 stream,int8 addr)" `441 
f N "i2c_poll" 1 678 ""
f B "i2c_poll" 1 678 "int8()" `444 
f N "i2c_poll" 1 679 ""
v L "stream" 1 679 "int8" `446 
f B "i2c_poll" 1 679 "int8(int8 stream)" `445 
f N "i2c_init" 1 680 ""
v L "baud" 1 680 "int32" `448 
f B "i2c_init" 1 680 "void(int32 baud)" `447 
f N "i2c_init" 1 681 ""
v L "stream" 1 681 "int8" `450 
v L "baud" 1 681 "int32" `451 
f B "i2c_init" 1 681 "void(int8 stream,int32 baud)" `449  "#use spi() Prototypes:"
f N "spi_xfer" 1 684 ""
f B "spi_xfer" 1 684 "int8()" `452 
f N "spi_xfer" 1 685 ""
f G "spi_xfer" 1 685 "int16(int8 data)" `453 
f N "spi_xfer" 1 686 ""
f G "spi_xfer" 1 686 "int32(int8 data)" `453 
f N "spi_xfer" 1 687 ""
v L "data" 1 687 "int8" `454 
f B "spi_xfer" 1 687 "int8(int8 data)" `453 
f N "spi_xfer" 1 688 ""
v L "data" 1 688 "int16" `456 
f B "spi_xfer" 1 688 "int16(int16 data)" `455 
f N "spi_xfer" 1 689 ""
v L "data" 1 689 "int32" `458 
f B "spi_xfer" 1 689 "int32(int32 data)" `457 
f N "spi_xfer" 1 690 ""
v L "stream" 1 690 "int8" `460 
v L "data" 1 690 "int8" `461 
f B "spi_xfer" 1 690 "int8(int8 stream,int8 data)" `459 
f N "spi_xfer" 1 691 ""
v L "stream" 1 691 "int8" `463 
v L "data" 1 691 "int16" `464 
f B "spi_xfer" 1 691 "int16(int8 stream,int16 data)" `462 
f N "spi_xfer" 1 692 ""
v L "stream" 1 692 "int8" `466 
v L "data" 1 692 "int32" `467 
f B "spi_xfer" 1 692 "int32(int8 stream,int32 data)" `465 
f N "spi_xfer" 1 693 ""
v L "stream" 1 693 "int8" `469 
v L "data" 1 693 "int8" `470 
v L "bits" 1 693 "int8" `471 
f B "spi_xfer" 1 693 "int8(int8 stream,int8 data,int8 bits)" `468 
f N "spi_xfer" 1 694 ""
v L "stream" 1 694 "int8" `473 
v L "data" 1 694 "int16" `474 
v L "bits" 1 694 "int8" `475 
f B "spi_xfer" 1 694 "int16(int8 stream,int16 data,int8 bits)" `472 
f N "spi_xfer" 1 695 ""
v L "stream" 1 695 "int8" `477 
v L "data" 1 695 "int32" `478 
v L "bits" 1 695 "int8" `479 
f B "spi_xfer" 1 695 "int32(int8 stream,int32 data,int8 bits)" `476 
f N "spi_init" 1 696 ""
v L "baud" 1 696 "int32" `481 
f B "spi_init" 1 696 "void(int32 baud)" `480 
f N "spi_init" 1 697 ""
v L "stream" 1 697 "int8" `483 
v L "baud" 1 697 "int32" `484 
f B "spi_init" 1 697 "void(int8 stream,int32 baud)" `482 
f N "spi_speed" 1 698 ""
v L "baud" 1 698 "int32" `486 
f B "spi_speed" 1 698 "void(int32 baud)" `485 
f N "spi_speed" 1 699 ""
v L "stream" 1 699 "int8" `488 
v L "baud" 1 699 "int32" `489 
f B "spi_speed" 1 699 "void(int8 stream,int32 baud)" `487 
f N "spi_speed" 1 700 ""
v L "stream" 1 700 "int8" `491 
v L "baud" 1 700 "int32" `492 
v L "clock" 1 700 "int32" `493 
f B "spi_speed" 1 700 "void(int8 stream,int32 baud,int32 clock)" `490 
f N "spi_prewrite" 1 701 ""
v L "data" 1 701 "int8" `495 
f B "spi_prewrite" 1 701 "void(int8 data)" `494 
f N "spi_prewrite" 1 702 ""
v L "data" 1 702 "int16" `497 
f B "spi_prewrite" 1 702 "void(int16 data)" `496 
f N "spi_prewrite" 1 703 ""
v L "data" 1 703 "int32" `499 
f B "spi_prewrite" 1 703 "void(int32 data)" `498 
f N "spi_prewrite" 1 704 ""
v L "??65535" 1 704 "int8" `501 
v L "data" 1 704 "int8" `502 
f B "spi_prewrite" 1 704 "void(int8 ,int8 data)" `500 
f N "spi_prewrite" 1 705 ""
v L "??65535" 1 705 "int8" `504 
v L "data" 1 705 "int16" `505 
f B "spi_prewrite" 1 705 "void(int8 ,int16 data)" `503 
f N "spi_prewrite" 1 706 ""
v L "??65535" 1 706 "int8" `507 
v L "data" 1 706 "int32" `508 
f B "spi_prewrite" 1 706 "void(int8 ,int32 data)" `506 
f N "spi_xfer_in" 1 707 ""
f B "spi_xfer_in" 1 707 "int8()" `509 
f N "spi_xfer_in" 1 708 ""
f G "spi_xfer_in" 1 708 "int16(int8 bits)" `510 
f N "spi_xfer_in" 1 709 ""
f G "spi_xfer_in" 1 709 "int32(int8 bits)" `510 
f N "spi_xfer_in" 1 710 ""
v L "bits" 1 710 "int8" `511 
f B "spi_xfer_in" 1 710 "int8(int8 bits)" `510 
f N "spi_xfer_in" 1 711 ""
v L "bits" 1 711 "int8" `513 
f G "spi_xfer_in" 1 711 "int16(int8 bits,int8 bits)" `512 
f N "spi_xfer_in" 1 712 ""
v L "bits" 1 712 "int8" `513 
f G "spi_xfer_in" 1 712 "int32(int8 bits,int8 bits)" `512 
f N "spi_xfer_in" 1 713 ""
v L "stream" 1 713 "int8" `513 
v L "bits" 1 713 "int8" `514 
f B "spi_xfer_in" 1 713 "int8(int8 stream,int8 bits)" `512 
f N "spi_xfer_in" 1 714 ""
v L "stream" 1 714 "int8" `513 
v L "bits" 1 714 "int8" `517 
f G "spi_xfer_in" 1 714 "int16(int8 stream,int8 bits,int8 task)" `515 
f N "spi_xfer_in" 1 715 ""
v L "stream" 1 715 "int8" `513 
v L "bits" 1 715 "int8" `517 
f G "spi_xfer_in" 1 715 "int32(int8 stream,int8 bits,int8 task)" `515  "#use rtos() Prototypes:"
f N "rtos_run" 1 718 ""
f B "rtos_run" 1 718 "void(int8 stream,int8 bits,int8 task)" `515 
f N "rtos_yield" 1 719 ""
f B "rtos_yield" 1 719 "void(int8 bits,int8 task)" `516 
f N "rtos_enable" 1 720 ""
v L "task" 1 720 "int8" `518 
f B "rtos_enable" 1 720 "void(int8 task)" `517 
f N "rtos_disable" 1 721 ""
v L "task" 1 721 "int8" `520 
f B "rtos_disable" 1 721 "void(int8 task)" `519 
f N "rtos_terminate" 1 722 ""
f B "rtos_terminate" 1 722 "void()" `521 
f N "rtos_await" 1 723 ""
v L "flag" 1 723 "int8" `523 
f B "rtos_await" 1 723 "void(int8 flag)" `522 
f N "rtos_wait" 1 724 ""
v L "sem" 1 724 "int8" `525 
f B "rtos_wait" 1 724 "void(int8 sem)" `524 
f N "rtos_signal" 1 725 ""
v L "sem" 1 725 "int8" `527 
f B "rtos_signal" 1 725 "void(int8 sem)" `526 
f N "rtos_msg_send" 1 726 ""
v L "task" 1 726 "int8" `529 
v L "msg" 1 726 "int8" `530 
f B "rtos_msg_send" 1 726 "void(int8 task,int8 msg)" `528 
f N "rtos_msg_read" 1 727 ""
f B "rtos_msg_read" 1 727 "int8()" `531 
f N "rtos_msg_poll" 1 728 ""
f B "rtos_msg_poll" 1 728 "int8()" `532 
f N "rtos_overrun" 1 729 ""
v L "task" 1 729 "int8" `534 
f B "rtos_overrun" 1 729 "int8(int8 task)" `533 
f N "rtos_stats" 1 730 ""
v L "task" 1 730 "int8" `536 
v L "stat" 1 730 "*int8" `537 
f B "rtos_stats" 1 730 "void(int8 task,*int8 stat)" `535  "#use timer() Prototypes:"
f N "get_ticks" 1 733 ""
f B "get_ticks" 1 733 "int8()" `538 
f N "get_ticks" 1 734 ""
f G "get_ticks" 1 734 "int16(int8 stream)" `539 
f N "get_ticks" 1 735 ""
f G "get_ticks" 1 735 "int32(int8 stream)" `539 
f N "get_ticks" 1 736 ""
v L "stream" 1 736 "int8" `540 
f B "get_ticks" 1 736 "int8(int8 stream)" `539 
f N "get_ticks" 1 737 ""
v L "stream" 1 737 "int8" `542 
f G "get_ticks" 1 737 "int16(int8 stream)" `541 
f N "get_ticks" 1 738 ""
v L "stream" 1 738 "int8" `542 
f G "get_ticks" 1 738 "int32(int8 stream)" `541 
f N "set_ticks" 1 739 ""
v L "value" 1 739 "int8" `542 
f B "set_ticks" 1 739 "void(int8 value)" `541 
f N "set_ticks" 1 740 ""
v L "value" 1 740 "int16" `544 
f B "set_ticks" 1 740 "void(int16 value)" `543 
f N "set_ticks" 1 741 ""
v L "value" 1 741 "int32" `546 
f B "set_ticks" 1 741 "void(int32 value)" `545 
f N "set_ticks" 1 742 ""
v L "stream" 1 742 "int8" `548 
v L "value" 1 742 "int8" `549 
f B "set_ticks" 1 742 "void(int8 stream,int8 value)" `547 
f N "set_ticks" 1 743 ""
v L "stream" 1 743 "int8" `551 
v L "value" 1 743 "int16" `552 
f B "set_ticks" 1 743 "void(int8 stream,int16 value)" `550 
f N "set_ticks" 1 744 ""
v L "stream" 1 744 "int8" `554 
v L "value" 1 744 "int32" `555 
f B "set_ticks" 1 744 "void(int8 stream,int32 value)" `553  "#use pwm() Prototypes:"
f N "pwm_on" 1 747 ""
f B "pwm_on" 1 747 "void()" `556 
f N "pwm_on" 1 748 ""
v L "stream" 1 748 "int8" `558 
f B "pwm_on" 1 748 "void(int8 stream)" `557 
f N "pwm_off" 1 749 ""
f B "pwm_off" 1 749 "void()" `559 
f N "pwm_off" 1 750 ""
v L "stream" 1 750 "int8" `561 
f B "pwm_off" 1 750 "void(int8 stream)" `560 
f N "pwm_set_duty" 1 751 ""
v L "duty" 1 751 "int16" `563 
f B "pwm_set_duty" 1 751 "void(int16 duty)" `562 
f N "pwm_set_duty" 1 752 ""
v L "stream" 1 752 "int8" `565 
v L "duty" 1 752 "int16" `566 
f B "pwm_set_duty" 1 752 "void(int8 stream,int16 duty)" `564 
f N "pwm_set_duty_percent" 1 753 ""
v L "percent" 1 753 "int16" `568 
f B "pwm_set_duty_percent" 1 753 "void(int16 percent)" `567 
f N "pwm_set_duty_percent" 1 754 ""
v L "stream" 1 754 "int8" `570 
v L "percent" 1 754 "int16" `571 
f B "pwm_set_duty_percent" 1 754 "void(int8 stream,int16 percent)" `569 
f N "pwm_set_frequency" 1 755 ""
v L "frequency" 1 755 "int32" `573 
f B "pwm_set_frequency" 1 755 "void(int32 frequency)" `572 
f N "pwm_set_frequency" 1 756 ""
v L "stream" 1 756 "int8" `575 
v L "frequency" 1 756 "int32" `576 
f B "pwm_set_frequency" 1 756 "void(int8 stream,int32 frequency)" `574  "#use capture() Prototypes:"
f N "get_capture_time" 1 759 ""
f B "get_capture_time" 1 759 "int16()" `577 
f N "get_capture_time" 1 760 ""
v L "stream" 1 760 "int8" `579 
f B "get_capture_time" 1 760 "int16(int8 stream)" `578 
f N "get_capture_event" 1 761 ""
f B "get_capture_event" 1 761 "int8()" `580 
f N "get_capture_event" 1 762 ""
v L "stream" 1 762 "int8" `582 
f B "get_capture_event" 1 762 "int8(int8 stream)" `581  "Enviroment Prototypes:"
c L "get_capture_event" 1 1 2 "FUNCTION"
f N "goto_address" 1 775 ""
v L "address" 1 775 "int16" `584 
f B "goto_address" 1 775 "void(int16 address)" `583 
f N "label_address" 1 776 ""
v L "label" 1 776 "int16" `586 
f B "label_address" 1 776 "int16(int16 label)" `585  "Program Memory Prototypes:"
f N "read_program_memory" 1 779 ""
v L "address" 1 779 "int16" `588 
v L "dataptr" 1 779 "*int8" `589 
v L "count" 1 779 "int16" `590 
f B "read_program_memory" 1 779 "void(int16 address,*int8 dataptr,int16 count)" `587 
f N "read_program_eeprom" 1 780 ""
v L "address" 1 780 "int16" `592 
f B "read_program_eeprom" 1 780 "int16(int16 address)" `591 
f N "erase_program_eeprom" 1 781 ""
v L "address" 1 781 "int16" `594 
f B "erase_program_eeprom" 1 781 "void(int16 address)" `593 
f N "write_program_memory" 1 782 ""
v L "address" 1 782 "int16" `596 
v L "dataptr" 1 782 "*int8" `597 
v L "count" 1 782 "int16" `598 
f B "write_program_memory" 1 782 "void(int16 address,*int8 dataptr,int16 count)" `595 
f N "write_program_eeprom" 1 783 ""
v L "address" 1 783 "int16" `600 
v L "data" 1 783 "int16" `601 
f B "write_program_eeprom" 1 783 "void(int16 address,int16 data)" `599  "EEPROM Prototypes:"
d G "__EEADDRESS__" 1 788 "unsigned int16"
f N "read_eeprom" 1 793 ""
v L "address" 1 793 "int16" `603 
f B "read_eeprom" 1 793 "int8(int16 address)" `602 
f N "write_eeprom" 1 794 ""
v L "address" 1 794 "int16" `605 
v L "value" 1 794 "int8" `606 
f B "write_eeprom" 1 794 "void(int16 address,int8 value)" `604  "INT"
c L "write_eeprom" 1 1 4 "FUNCTION"
f N "enable_interrupts" 1 801 ""
v L "interrupt" 1 801 "int32" `608 
f B "enable_interrupts" 1 801 "void(int32 interrupt)" `607 
f N "disable_interrupts" 1 802 ""
v L "interrupt" 1 802 "int32" `610 
f B "disable_interrupts" 1 802 "void(int32 interrupt)" `609 
f N "clear_interrupt" 1 803 ""
v L "interrupt" 1 803 "int32" `612 
f B "clear_interrupt" 1 803 "void(int32 interrupt)" `611 
f N "interrupt_active" 1 804 ""
v L "interrupt" 1 804 "int32" `614 
f B "interrupt_active" 1 804 "int8(int32 interrupt)" `613 
f N "interrupt_enabled" 1 805 ""
v L "interrupt" 1 805 "int32" `616 
f B "interrupt_enabled" 1 805 "int8(int32 interrupt)" `615 
f N "ext_int_edge" 1 806 ""
v L "source" 1 806 "int8" `618 
v L "edge" 1 806 "int8" `619 
f B "ext_int_edge" 1 806 "void(int8 source,int8 edge)" `617 
f N "jump_to_isr" 1 807 ""
v L "address" 1 807 "int16" `621 
f B "jump_to_isr" 1 807 "void(int16 address)" `620  "Constants used in EXT_INT_EDGE() are:"
d G "L_TO_H" 1 809 "0x40"
d G "H_TO_L" 1 810 "0"
d G "GLOBAL" 1 812 "0xF2C0"
d G "PERIPH" 1 813 "0xF240"
d G "INT_RTCC" 1 814 "0x00F220"
d G "INT_TIMER0" 1 815 "0x00F220"
d G "INT_TIMER1" 1 816 "0x009D01"
d G "INT_TIMER2" 1 817 "0x009D02"
d G "INT_TIMER3" 1 818 "0x00A002"
d G "INT_EXT_L2H" 1 819 "0x5000F210"
d G "INT_EXT_H2L" 1 820 "0x6000F210"
d G "INT_EXT" 1 821 "0x00F210"
d G "INT_EXT1_L2H" 1 822 "0x5001F008"
d G "INT_EXT1_H2L" 1 823 "0x6001F008"
d G "INT_EXT1" 1 824 "0x00F008"
d G "INT_EXT2_L2H" 1 825 "0x5002F010"
d G "INT_EXT2_H2L" 1 826 "0x6002F010"
d G "INT_EXT2" 1 827 "0x00F010"
d G "INT_RB" 1 828 "0x00FFF208"
d G "INT_PSP" 1 829 "0x009D80"
d G "INT_AD" 1 830 "0x009D40"
d G "INT_RDA" 1 831 "0x009D20"
d G "INT_TBE" 1 832 "0x009D10"
d G "INT_SSP" 1 833 "0x009D08"
d G "INT_CCP1" 1 834 "0x009D04"
d G "INT_CCP2" 1 835 "0x00A001"
d G "INT_BUSCOL" 1 836 "0x00A008"
d G "INT_LOWVOLT" 1 837 "0x00A004"
d G "INT_COMP" 1 838 "0x00A040"
d G "INT_EEPROM" 1 839 "0x00A010"
d G "INT_OSCF" 1 840 "0x00A080"
d G "INT_HLVD" 1 841 "0x00A004"
V G "DATA0" 0 12 "int8" `630  "Fonction pour envoyer un octet au PCF8574"
F N "output_portF" 0 15 ""
V L "data" 0 15 "int8" `632 
F G "output_portF" 0 15 "void(int8 data)" `631 
C L "output_portF" 0 17 1 "FUNCTION"
C L "output_portF" 0 17 1 "FUNCTION"
F N "main" 0 22 ""
F G "main" 0 22 "void()" `633 
C L "main" 0 17 1 "FUNCTION"
C L "main" 0 17 1 "FUNCTION"
F B "reset_cpu" 0 0
F B "abs" 1 0
F B "sleep" 0 1
F B "delay_cycles" 1 0
F B "read_bank" 2 0
F B "write_bank" 3 0
F B "shift_left" 2 2
F B "shift_right" 2 2
F B "rotate_left" 2 0
F B "rotate_right" 2 0
F B "_mul" 2 0
F B "memset" 3 0
F B "isamoung" 2 0
F B "isamong" 2 0
F B "bit_set" 2 0
F B "bit_clear" 2 0
F B "bit_test" 2 0
F B "toupper" 1 0
F B "tolower" 1 0
F B "swap" 1 0
F B "printf" 1 255
F B "fprintf" 1 255
F B "sprintf" 1 255
F B "scanf" 1 255
F B "fscanf" 1 255
F B "make8" 2 0
F B "make16" 2 0
F B "make32" 1 255
F B "label_address" 1 1
F B "goto_address" 1 0
F B "_va_arg" 1 0
F B "offsetofbit" 2 2
F B "_iosctrl" 1 2
F B "profileout" 1 2
F B "enable_interrupts" 1 0
F B "disable_interrupts" 1 0
F B "interrupt_active" 1 0
F B "clear_interrupt" 1 0
F B "interrupt_enabled" 1 0
F B "jump_to_isr" 1 0
F B "ext_int_edge" 1 2
F B "read_eeprom" 1 0
F B "write_eeprom" 2 0
F B "read_program_eeprom" 1 0
F B "write_program_eeprom" 2 0
F B "write_program_memory" 3 0
F B "read_program_memory" 3 0
F B "read_rom_memory" 3 0
F B "erase_program_eeprom" 1 0
F B "write_configuration_memory" 2 3
F B "read_configuration_memory" 2 3
F B "strcpy" 2 0
F B "memcpy" 3 0
F B "strstr100" 2 0
F B "output_high" 1 0
F B "output_low" 1 0
F B "input" 1 0
F B "input_state" 1 0
F B "output_float" 1 0
F B "output_drive" 1 0
F B "output_bit" 1 1
F B "output_toggle" 1 0
F B "output_a" 1 0
F B "output_b" 1 0
F B "output_c" 1 0
F B "output_d" 1 0
F B "output_e" 1 0
F B "input_a" 0 0
F B "input_b" 0 0
F B "input_c" 0 0
F B "input_d" 0 0
F B "input_e" 0 0
F B "set_tris_a" 1 0
F B "set_tris_b" 1 0
F B "set_tris_c" 1 0
F B "set_tris_d" 1 0
F B "set_tris_e" 1 0
F B "get_tris_a" 0 0
F B "get_tris_b" 0 0
F B "get_tris_c" 0 0
F B "get_tris_d" 0 0
F B "get_tris_e" 0 0
F B "input_change_a" 0 0
F B "input_change_b" 0 0
F B "input_change_c" 0 0
F B "input_change_d" 0 0
F B "input_change_e" 0 0
F B "port_b_pullups" 1 0
F B "setup_counters" 2 0
F B "setup_wdt" 1 0
F B "restart_cause" 0 0
F B "restart_wdt" 0 0
F B "get_rtcc" 0 0
F B "set_rtcc" 1 0
F B "get_timer0" 0 0
F B "set_timer0" 1 0
F B "setup_comparator" 1 0
F B "setup_port_a" 1 2
F B "setup_adc_ports" 1 2
F B "get_adc_ports" 0 0
F B "setup_adc" 1 0
F B "set_adc_channel" 1 0
F B "read_adc" 0 1
F B "adc_done" 0 0
F B "set_analog_pins" 1 2
F B "get_capture" 0 1
F B "set_compare_time" 1 2
F B "setup_timer_0" 1 0
F B "setup_vref" 1 0
F B "setup_timer_1" 1 0
F B "get_timer1" 0 0
F B "set_timer1" 1 0
F B "setup_timer_2" 3 0
F B "get_timer2" 0 0
F B "set_timer2" 1 0
F B "setup_timer_3" 1 0
F B "set_timer3" 1 0
F B "get_timer3" 0 0
F B "setup_ccp1" 1 2
F B "set_pwm1_duty" 1 0
F B "setup_ccp2" 1 0
F B "set_pwm2_duty" 1 0
F B "setup_low_volt_detect" 1 0
F B "setup_oscillator" 0 2
F B "pll_locked" 0 0
F B "setup_psp" 1 0
F B "psp_output_full" 0 0
F B "psp_input_full" 0 0
F B "psp_overflow" 0 0
F B "setup_spi" 1 0
F B "spi_read" 0 1
F B "spi_write" 1 2
F B "spi_data_is_in" 0 0
F B "setup_spi2" 1 0
F B "spi_read2" 0 1
F B "spi_write2" 1 2
F B "spi_data_is_in2" 0 0
F B "brownout_enable" 1 0
F B "delay_ms" 1 0
F B "delay_us" 1 0
F B "i2c_read" 0 2
F B "i2c_write" 1 2
F B "i2c_start" 0 2
F B "i2c_stop" 0 1
F B "i2c_isr_state" 0 1
F B "i2c_init" 1 2
